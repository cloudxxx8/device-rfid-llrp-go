//
// Copyright (C) 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by "generate_param_code.py -i messages.yaml -s generated_structs.go -t binary_test.go -m generated_marshal.go -u generated_unmarshal.go -e generated_encoder.go"; DO NOT EDIT.

package llrp

import (
	"encoding/binary"
	"fmt"
	"io"
)

// EncodeFields for Message 46, GetSupportedVersion.
func (m *GetSupportedVersion) EncodeFields(w io.Writer) error {
	// GetSupportedVersion is a header-only message
	return nil
}

// EncodeFields for Message 56, GetSupportedVersionResponse.
func (m *GetSupportedVersionResponse) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.CurrentVersion) << 5, byte(m.MaxSupportedVersion) << 5}); err != nil {
		return fmt.Errorf("failed to write fields for GetSupportedVersionResponse: %w", err)
	}
	return nil
}

// EncodeFields for Message 47, SetProtocolVersion.
func (m *SetProtocolVersion) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(m.TargetVersion) << 5}); err != nil {
		return fmt.Errorf("failed to write fields for SetProtocolVersion: %w", err)
	}
	return nil
}

// EncodeFields for Message 57, SetProtocolVersionResponse.
func (m *SetProtocolVersionResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 1, GetReaderCapabilities.
func (m *GetReaderCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ReaderCapabilitiesRequestedData)}); err != nil {
		return fmt.Errorf("failed to write fields for GetReaderCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Message 11, GetReaderCapabilitiesResponse.
func (m *GetReaderCapabilitiesResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 20, AddROSpec.
func (m *AddROSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 30, AddROSpecResponse.
func (m *AddROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 21, DeleteROSpec.
func (m *DeleteROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for DeleteROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 31, DeleteROSpecResponse.
func (m *DeleteROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 22, StartROSpec.
func (m *StartROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for StartROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 32, StartROSpecResponse.
func (m *StartROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 23, StopROSpec.
func (m *StopROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for StopROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 33, StopROSpecResponse.
func (m *StopROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 24, EnableROSpec.
func (m *EnableROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for EnableROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 34, EnableROSpecResponse.
func (m *EnableROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 25, DisableROSpec.
func (m *DisableROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.ROSpecID >> 24), byte(m.ROSpecID >> 16), byte(m.ROSpecID >> 8), byte(m.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for DisableROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 35, DisableROSpecResponse.
func (m *DisableROSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 26, GetROSpecs.
func (m *GetROSpecs) EncodeFields(w io.Writer) error {
	// GetROSpecs is a header-only message
	return nil
}

// EncodeFields for Message 36, GetROSpecsResponse.
func (m *GetROSpecsResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 40, AddAccessSpec.
func (m *AddAccessSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 50, AddAccessSpecResponse.
func (m *AddAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 41, DeleteAccessSpec.
func (m *DeleteAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for DeleteAccessSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 51, DeleteAccessSpecResponse.
func (m *DeleteAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 42, EnableAccessSpec.
func (m *EnableAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for EnableAccessSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 52, EnableAccessSpecResponse.
func (m *EnableAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 43, DisableAccessSpec.
func (m *DisableAccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AccessSpecID >> 24), byte(m.AccessSpecID >> 16), byte(m.AccessSpecID >> 8), byte(m.AccessSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for DisableAccessSpec: %w", err)
	}
	return nil
}

// EncodeFields for Message 53, DisableAccessSpecResponse.
func (m *DisableAccessSpecResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 44, GetAccessSpecs.
func (m *GetAccessSpecs) EncodeFields(w io.Writer) error {
	// GetAccessSpecs is a header-only message
	return nil
}

// EncodeFields for Message 54, GetAccessSpecsResponse.
func (m *GetAccessSpecsResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 45, ClientRequestOp.
func (m *ClientRequestOp) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 55, ClientRequestOpResponse.
func (m *ClientRequestOpResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 60, GetReport.
func (m *GetReport) EncodeFields(w io.Writer) error {
	// GetReport is a header-only message
	return nil
}

// EncodeFields for Message 61, ROAccessReport.
func (m *ROAccessReport) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 62, KeepAlive.
func (m *KeepAlive) EncodeFields(w io.Writer) error {
	// KeepAlive is a header-only message
	return nil
}

// EncodeFields for Message 72, KeepAliveAck.
func (m *KeepAliveAck) EncodeFields(w io.Writer) error {
	// KeepAliveAck is a header-only message
	return nil
}

// EncodeFields for Message 63, ReaderEventNotification.
func (m *ReaderEventNotification) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 64, EnableEventsAndReports.
func (m *EnableEventsAndReports) EncodeFields(w io.Writer) error {
	// EnableEventsAndReports is a header-only message
	return nil
}

// EncodeFields for Message 100, ErrorMessage.
func (m *ErrorMessage) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 2, GetReaderConfig.
func (m *GetReaderConfig) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.AntennaID >> 8), byte(m.AntennaID), byte(m.RequestedData),
		byte(m.GPIPortNum >> 8), byte(m.GPIPortNum),
		byte(m.GPOPortNum >> 8), byte(m.GPOPortNum)}); err != nil {
		return fmt.Errorf("failed to write fields for GetReaderConfig: %w", err)
	}
	return nil
}

// EncodeFields for Message 12, GetReaderConfigResponse.
func (m *GetReaderConfigResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 3, SetReaderConfig.
func (m *SetReaderConfig) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(m.ResetToFactoryDefaults) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for SetReaderConfig: %w", err)
	}
	return nil
}

// EncodeFields for Message 13, SetReaderConfigResponse.
func (m *SetReaderConfigResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 14, CloseConnection.
func (m *CloseConnection) EncodeFields(w io.Writer) error {
	// CloseConnection is a header-only message
	return nil
}

// EncodeFields for Message 4, CloseConnectionResponse.
func (m *CloseConnectionResponse) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Message 1023, CustomMessage.
func (m *CustomMessage) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(m.VendorID >> 24), byte(m.VendorID >> 16), byte(m.VendorID >> 8), byte(m.VendorID), m.MessageSubtype}); err != nil {
		return fmt.Errorf("failed to write fields for CustomMessage: %w", err)
	}
	if _, err := w.Write(m.Data); err != nil {
		return fmt.Errorf("failed to write Data: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 1, AntennaID.
func (p *AntennaID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaID,
		data:      p,
		sz:        3,
	}
}
func (p *AntennaID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAntennaID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 2, FirstSeenUTC.
func (p *FirstSeenUTC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFirstSeenUTC,
		data:      p,
		sz:        9,
	}
}
func (p *FirstSeenUTC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFirstSeenUTC: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 3, FirstSeenUptime.
func (p *FirstSeenUptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFirstSeenUptime,
		data:      p,
		sz:        9,
	}
}
func (p *FirstSeenUptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFirstSeenUptime: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 4, LastSeenUTC.
func (p *LastSeenUTC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLastSeenUTC,
		data:      p,
		sz:        9,
	}
}
func (p *LastSeenUTC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLastSeenUTC: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 5, LastSeenUptime.
func (p *LastSeenUptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLastSeenUptime,
		data:      p,
		sz:        9,
	}
}
func (p *LastSeenUptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLastSeenUptime: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 6, PeakRSSI.
func (p *PeakRSSI) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPeakRSSI,
		data:      p,
		sz:        2,
	}
}
func (p *PeakRSSI) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamPeakRSSI: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 7, ChannelIndex.
func (p *ChannelIndex) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamChannelIndex,
		data:      p,
		sz:        3,
	}
}
func (p *ChannelIndex) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamChannelIndex: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 8, TagSeenCount.
func (p *TagSeenCount) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTagSeenCount,
		data:      p,
		sz:        3,
	}
}
func (p *TagSeenCount) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamTagSeenCount: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 9, ROSpecID.
func (p *ROSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamROSpecID,
		data:      p,
		sz:        5,
	}
}
func (p *ROSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROSpecID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 10, InventoryParameterSpecID.
func (p *InventoryParameterSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamInventoryParameterSpecID,
		data:      p,
		sz:        3,
	}
}
func (p *InventoryParameterSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamInventoryParameterSpecID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 11, C1G2CRC.
func (p *C1G2CRC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2CRC,
		data:      p,
		sz:        3,
	}
}
func (p *C1G2CRC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2CRC: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 12, C1G2PC.
func (p *C1G2PC) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2PC,
		data:      p,
		sz:        3,
	}
}
func (p *C1G2PC) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.EPCMemoryLength)<<3 | b2b(p.HasUserMemory)<<2 | b2b(p.HasXPC)<<1 | b2b(p.IsISO15961)<<0, p.AttributesOrAFI}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2PC: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 13, EPC96.
func (p *EPC96) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEPC96,
		data:      p,
		sz:        13,
	}
}
func (p *EPC96) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		p.EPC[0], p.EPC[1], p.EPC[2], p.EPC[3], p.EPC[4], p.EPC[5], p.EPC[6], p.EPC[7], p.EPC[8], p.EPC[9], p.EPC[10], p.EPC[11]}); err != nil {
		return fmt.Errorf("failed to write fields for ParamEPC96: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 14, SpecIndex.
func (p *SpecIndex) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamSpecIndex,
		data:      p,
		sz:        3,
	}
}
func (p *SpecIndex) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamSpecIndex: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 15, ClientRequestOpSpecResult.
func (p *ClientRequestOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamClientRequestOpSpecResult,
		data:      p,
		sz:        3,
	}
}
func (p *ClientRequestOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamClientRequestOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 16, AccessSpecID.
func (p *AccessSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessSpecID,
		data:      p,
		sz:        5,
	}
}
func (p *AccessSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAccessSpecID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 17, OpSpecID.
func (p *OpSpecID) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamOpSpecID,
		data:      p,
		sz:        3,
	}
}
func (p *OpSpecID) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamOpSpecID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 18, C1G2SingulationDetails.
func (p *C1G2SingulationDetails) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2SingulationDetails,
		data:      p,
		sz:        5,
	}
}
func (p *C1G2SingulationDetails) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.NumCollisionSlots >> 8), byte(p.NumCollisionSlots),
		byte(p.NumEmptySlots >> 8), byte(p.NumEmptySlots)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2SingulationDetails: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 19, C1G2XPCW1.
func (p *C1G2XPCW1) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2XPCW1,
		data:      p,
		sz:        3,
	}
}
func (p *C1G2XPCW1) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2XPCW1: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 20, C1G2XPCW2.
func (p *C1G2XPCW2) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2XPCW2,
		data:      p,
		sz:        3,
	}
}
func (p *C1G2XPCW2) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2XPCW2: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 128, UTCTimestamp.
func (p *UTCTimestamp) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUTCTimestamp,
		data:      p,
		sz:        12,
	}
}
func (p *UTCTimestamp) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamUTCTimestamp: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 129, Uptime.
func (p *Uptime) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUptime,
		data:      p,
		sz:        12,
	}
}
func (p *Uptime) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 56), byte(*p >> 48), byte(*p >> 40), byte(*p >> 32), byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamUptime: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 137, GeneralDeviceCapabilities.
func (p *GeneralDeviceCapabilities) getHeader() paramHeader {
	nParams := 1 + len(p.ReceiveSensitivities) +
		len(p.PerAntennaReceiveSensitivityRanges) +
		len(p.PerAntennaAirProtocols)
	if p.MaximumReceiveSensitivity != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamGeneralDeviceCapabilities,
		data:      p,
		sz:        18 + uint16(len(p.FirmwareVersion)),
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.ReceiveSensitivities {
		sh := p.ReceiveSensitivities[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.PerAntennaReceiveSensitivityRanges {
		sh := p.PerAntennaReceiveSensitivityRanges[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	ph.subs = append(ph.subs, p.GPIOCapabilities.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.PerAntennaAirProtocols {
		sh := p.PerAntennaAirProtocols[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.MaximumReceiveSensitivity != nil {
		sh := p.MaximumReceiveSensitivity.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *GeneralDeviceCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.MaxSupportedAntennas >> 8), byte(p.MaxSupportedAntennas), b2b(p.CanSetAntennaProperties)<<7 | b2b(p.HasUTCClock)<<6, 0x00,
		byte(p.DeviceManufacturer >> 24), byte(p.DeviceManufacturer >> 16), byte(p.DeviceManufacturer >> 8), byte(p.DeviceManufacturer),
		byte(p.Model >> 24), byte(p.Model >> 16), byte(p.Model >> 8), byte(p.Model)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGeneralDeviceCapabilities: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.FirmwareVersion) >> 8), byte(len(p.FirmwareVersion) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of FirmwareVersion: %w", err)
	}
	if _, err := w.Write([]byte(p.FirmwareVersion)); err != nil {
		return fmt.Errorf("failed to write FirmwareVersion: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 139, ReceiveSensitivityTableEntry.
func (p *ReceiveSensitivityTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReceiveSensitivityTableEntry,
		data:      p,
		sz:        8,
	}
}
func (p *ReceiveSensitivityTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Index >> 8), byte(p.Index),
		byte(p.ReceiveSensitivity >> 8), byte(p.ReceiveSensitivity)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamReceiveSensitivityTableEntry: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 140, PerAntennaAirProtocol.
func (p *PerAntennaAirProtocol) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPerAntennaAirProtocol,
		data:      p,
		sz:        8 + uint16(len(p.AirProtocolIDs)),
	}
}
func (p *PerAntennaAirProtocol) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamPerAntennaAirProtocol: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.AirProtocolIDs) >> 8), byte(len(p.AirProtocolIDs) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of AirProtocolIDs: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.AirProtocolIDs); err != nil {
		return fmt.Errorf("failed to write AirProtocolIDs: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 141, GPIOCapabilities.
func (p *GPIOCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIOCapabilities,
		data:      p,
		sz:        8,
	}
}
func (p *GPIOCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.NumGPIs >> 8), byte(p.NumGPIs),
		byte(p.NumGPOs >> 8), byte(p.NumGPOs)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGPIOCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 142, LLRPCapabilities.
func (p *LLRPCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLLRPCapabilities,
		data:      p,
		sz:        28,
	}
}
func (p *LLRPCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.CanDoRFSurvey)<<7 | b2b(p.CanReportBufferFillWarning)<<6 | b2b(p.SupportsClientRequestOpSpec)<<5 | b2b(p.CanDoTagInventoryStateAwareSingulation)<<4 | b2b(p.SupportsEventsAndReportHolding)<<3, p.MaxPriorityLevelSupported,
		byte(p.ClientRequestedOpSpecTimeout >> 8), byte(p.ClientRequestedOpSpecTimeout),
		byte(p.MaxROSpecs >> 24), byte(p.MaxROSpecs >> 16), byte(p.MaxROSpecs >> 8), byte(p.MaxROSpecs),
		byte(p.MaxSpecsPerROSpec >> 24), byte(p.MaxSpecsPerROSpec >> 16), byte(p.MaxSpecsPerROSpec >> 8), byte(p.MaxSpecsPerROSpec),
		byte(p.MaxInventoryParameterSpecsPerAISpec >> 24), byte(p.MaxInventoryParameterSpecsPerAISpec >> 16), byte(p.MaxInventoryParameterSpecsPerAISpec >> 8), byte(p.MaxInventoryParameterSpecsPerAISpec),
		byte(p.MaxAccessSpecs >> 24), byte(p.MaxAccessSpecs >> 16), byte(p.MaxAccessSpecs >> 8), byte(p.MaxAccessSpecs),
		byte(p.MaxOpSpecsPerAccessSpec >> 24), byte(p.MaxOpSpecsPerAccessSpec >> 16), byte(p.MaxOpSpecsPerAccessSpec >> 8), byte(p.MaxOpSpecsPerAccessSpec)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLLRPCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 143, RegulatoryCapabilities.
func (p *RegulatoryCapabilities) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.UHFBandCapabilities != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamRegulatoryCapabilities,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.UHFBandCapabilities != nil {
		sh := p.UHFBandCapabilities.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *RegulatoryCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.CountryCode >> 8), byte(p.CountryCode),
		byte(p.CommunicationsStandard >> 8), byte(p.CommunicationsStandard)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRegulatoryCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 144, UHFBandCapabilities.
func (p *UHFBandCapabilities) getHeader() paramHeader {
	nParams := 2 + len(p.TransmitPowerLevels)
	if p.RFSurveyFrequencyCapabilities != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamUHFBandCapabilities,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.TransmitPowerLevels {
		sh := p.TransmitPowerLevels[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	ph.subs = append(ph.subs, p.FrequencyInformation.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	ph.subs = append(ph.subs, p.C1G2RFModes.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.RFSurveyFrequencyCapabilities != nil {
		sh := p.RFSurveyFrequencyCapabilities.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *UHFBandCapabilities) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 145, TransmitPowerLevelTableEntry.
func (p *TransmitPowerLevelTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTransmitPowerLevelTableEntry,
		data:      p,
		sz:        8,
	}
}
func (p *TransmitPowerLevelTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Index >> 8), byte(p.Index),
		byte(p.TransmitPowerValue >> 8), byte(p.TransmitPowerValue)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamTransmitPowerLevelTableEntry: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 146, FrequencyInformation.
func (p *FrequencyInformation) getHeader() paramHeader {
	nParams := len(p.FrequencyHopTables)
	if p.FixedFrequencyTable != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamFrequencyInformation,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.FrequencyHopTables {
		sh := p.FrequencyHopTables[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FixedFrequencyTable != nil {
		sh := p.FixedFrequencyTable.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *FrequencyInformation) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{b2b(p.Hopping) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFrequencyInformation: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 147, FrequencyHopTable.
func (p *FrequencyHopTable) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFrequencyHopTable,
		data:      p,
		sz:        8 + uint16(len(p.Frequencies)*4),
	}
}
func (p *FrequencyHopTable) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{p.HopTableID, 0x00}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFrequencyHopTable: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.Frequencies) >> 8), byte(len(p.Frequencies) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Frequencies: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.Frequencies); err != nil {
		return fmt.Errorf("failed to write Frequencies: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 148, FixedFrequencyTable.
func (p *FixedFrequencyTable) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFixedFrequencyTable,
		data:      p,
		sz:        6 + uint16(len(p.Frequencies)*4),
	}
}
func (p *FixedFrequencyTable) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.Frequencies) >> 8), byte(len(p.Frequencies) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Frequencies: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.Frequencies); err != nil {
		return fmt.Errorf("failed to write Frequencies: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 149, PerAntennaReceiveSensitivityRange.
func (p *PerAntennaReceiveSensitivityRange) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamPerAntennaReceiveSensitivityRange,
		data:      p,
		sz:        10,
	}
}
func (p *PerAntennaReceiveSensitivityRange) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.ReceiveSensitivityIndexMin >> 8), byte(p.ReceiveSensitivityIndexMin),
		byte(p.ReceiveSensitivityIndexMax >> 8), byte(p.ReceiveSensitivityIndexMax)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamPerAntennaReceiveSensitivityRange: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 177, ROSpec.
func (p *ROSpec) getHeader() paramHeader {
	nParams := 1 + len(p.AISpecs) + len(p.RFSurveySpecs) + len(p.Custom)
	if p.LoopSpec != nil {
		nParams++
	}
	if p.ROReportSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpec,
		data:      p,
		sz:        10,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.ROBoundarySpec.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.AISpecs {
		sh := p.AISpecs[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.RFSurveySpecs {
		sh := p.RFSurveySpecs[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LoopSpec != nil {
		sh := p.LoopSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ROReportSpec != nil {
		sh := p.ROReportSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ROSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID), p.Priority, byte(p.ROSpecCurrentState)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 178, ROBoundarySpec.
func (p *ROBoundarySpec) getHeader() paramHeader {
	ph := paramHeader{
		ParamType: ParamROBoundarySpec,
		data:      p,
		sz:        4,
	}
	ph.subs = append(ph.subs, p.StartTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	ph.subs = append(ph.subs, p.StopTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	return ph
}
func (p *ROBoundarySpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 179, ROSpecStartTrigger.
func (p *ROSpecStartTrigger) getHeader() paramHeader {
	nParams := 0
	if p.PeriodicTrigger != nil {
		nParams++
	}
	if p.GPITrigger != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpecStartTrigger,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.PeriodicTrigger != nil {
		sh := p.PeriodicTrigger.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.GPITrigger != nil {
		sh := p.GPITrigger.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ROSpecStartTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROSpecStartTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 180, PeriodicTriggerValue.
func (p *PeriodicTriggerValue) getHeader() paramHeader {
	nParams := 0
	if p.UTCTimestamp != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamPeriodicTriggerValue,
		data:      p,
		sz:        12,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.UTCTimestamp != nil {
		sh := p.UTCTimestamp.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *PeriodicTriggerValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Offset >> 24), byte(p.Offset >> 16), byte(p.Offset >> 8), byte(p.Offset),
		byte(p.Period >> 24), byte(p.Period >> 16), byte(p.Period >> 8), byte(p.Period)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamPeriodicTriggerValue: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 181, GPITriggerValue.
func (p *GPITriggerValue) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPITriggerValue,
		data:      p,
		sz:        11,
	}
}
func (p *GPITriggerValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Port >> 8), byte(p.Port), b2b(p.Event) << 7,
		byte(p.Timeout >> 24), byte(p.Timeout >> 16), byte(p.Timeout >> 8), byte(p.Timeout)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGPITriggerValue: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 182, ROSpecStopTrigger.
func (p *ROSpecStopTrigger) getHeader() paramHeader {
	nParams := 0
	if p.GPITriggerValue != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamROSpecStopTrigger,
		data:      p,
		sz:        9,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.GPITriggerValue != nil {
		sh := p.GPITriggerValue.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ROSpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.DurationTriggerValue >> 24), byte(p.DurationTriggerValue >> 16), byte(p.DurationTriggerValue >> 8), byte(p.DurationTriggerValue)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROSpecStopTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 183, AISpec.
func (p *AISpec) getHeader() paramHeader {
	nParams := 1 + len(p.InventoryParameterSpecs) + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamAISpec,
		data:      p,
		sz:        6 + uint16(len(p.AntennaIDs)*2),
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.StopTrigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.InventoryParameterSpecs {
		sh := p.InventoryParameterSpecs[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AISpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.AntennaIDs) >> 8), byte(len(p.AntennaIDs) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of AntennaIDs: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.AntennaIDs); err != nil {
		return fmt.Errorf("failed to write AntennaIDs: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 184, AISpecStopTrigger.
func (p *AISpecStopTrigger) getHeader() paramHeader {
	nParams := 0
	if p.GPITrigger != nil {
		nParams++
	}
	if p.TagObservationTrigger != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAISpecStopTrigger,
		data:      p,
		sz:        9,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.GPITrigger != nil {
		sh := p.GPITrigger.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.TagObservationTrigger != nil {
		sh := p.TagObservationTrigger.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AISpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.DurationTriggerValue >> 24), byte(p.DurationTriggerValue >> 16), byte(p.DurationTriggerValue >> 8), byte(p.DurationTriggerValue)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAISpecStopTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 185, TagObservationTrigger.
func (p *TagObservationTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamTagObservationTrigger,
		data:      p,
		sz:        16,
	}
}
func (p *TagObservationTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger), 0x00,
		byte(p.NumberOfTags >> 8), byte(p.NumberOfTags),
		byte(p.NumberOfAttempts >> 8), byte(p.NumberOfAttempts),
		byte(p.T >> 8), byte(p.T),
		byte(p.Timeout >> 24), byte(p.Timeout >> 16), byte(p.Timeout >> 8), byte(p.Timeout)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamTagObservationTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 186, InventoryParameterSpec.
func (p *InventoryParameterSpec) getHeader() paramHeader {
	nParams := len(p.AntennaConfigurations) + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamInventoryParameterSpec,
		data:      p,
		sz:        7,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.AntennaConfigurations {
		sh := p.AntennaConfigurations[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *InventoryParameterSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.InventoryParameterSpecID >> 8), byte(p.InventoryParameterSpecID), byte(p.AirProtocolID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamInventoryParameterSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 187, RFSurveySpec.
func (p *RFSurveySpec) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamRFSurveySpec,
		data:      p,
		sz:        14,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.Trigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *RFSurveySpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.StartFrequency >> 24), byte(p.StartFrequency >> 16), byte(p.StartFrequency >> 8), byte(p.StartFrequency),
		byte(p.EndFrequency >> 24), byte(p.EndFrequency >> 16), byte(p.EndFrequency >> 8), byte(p.EndFrequency)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFSurveySpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 188, RFSurveySpecStopTrigger.
func (p *RFSurveySpecStopTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveySpecStopTrigger,
		data:      p,
		sz:        13,
	}
}
func (p *RFSurveySpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.Duration >> 24), byte(p.Duration >> 16), byte(p.Duration >> 8), byte(p.Duration),
		byte(p.N >> 24), byte(p.N >> 16), byte(p.N >> 8), byte(p.N)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFSurveySpecStopTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 207, AccessSpec.
func (p *AccessSpec) getHeader() paramHeader {
	nParams := 2 + len(p.Custom)
	if p.AccessReportSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAccessSpec,
		data:      p,
		sz:        16,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.Trigger.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	ph.subs = append(ph.subs, p.AccessCommand.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.AccessReportSpec != nil {
		sh := p.AccessReportSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AccessSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AccessSpecID >> 24), byte(p.AccessSpecID >> 16), byte(p.AccessSpecID >> 8), byte(p.AccessSpecID),
		byte(p.AntennaID >> 8), byte(p.AntennaID), byte(p.AirProtocolID), b2b(p.IsActive) << 7,
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAccessSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 208, AccessSpecStopTrigger.
func (p *AccessSpecStopTrigger) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessSpecStopTrigger,
		data:      p,
		sz:        7,
	}
}
func (p *AccessSpecStopTrigger) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.OperationCountValue >> 8), byte(p.OperationCountValue)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAccessSpecStopTrigger: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 209, AccessCommand.
func (p *AccessCommand) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	if p.C1G2Read != nil {
		nParams++
	}
	if p.C1G2Write != nil {
		nParams++
	}
	if p.C1G2Kill != nil {
		nParams++
	}
	if p.C1G2Recommission != nil {
		nParams++
	}
	if p.C1G2Lock != nil {
		nParams++
	}
	if p.C1G2BlockErase != nil {
		nParams++
	}
	if p.C1G2BlockWrite != nil {
		nParams++
	}
	if p.C1G2BlockPermalock != nil {
		nParams++
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		nParams++
	}
	if p.ClientRequestOpSpec != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAccessCommand,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.C1G2TagSpec.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.C1G2Read != nil {
		sh := p.C1G2Read.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Write != nil {
		sh := p.C1G2Write.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Kill != nil {
		sh := p.C1G2Kill.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Recommission != nil {
		sh := p.C1G2Recommission.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Lock != nil {
		sh := p.C1G2Lock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockErase != nil {
		sh := p.C1G2BlockErase.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockWrite != nil {
		sh := p.C1G2BlockWrite.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockPermalock != nil {
		sh := p.C1G2BlockPermalock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		sh := p.C1G2GetBlockPermalockStatus.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ClientRequestOpSpec != nil {
		sh := p.ClientRequestOpSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AccessCommand) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 210, ClientRequestOpSpec.
func (p *ClientRequestOpSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamClientRequestOpSpec,
		data:      p,
		sz:        6,
	}
}
func (p *ClientRequestOpSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamClientRequestOpSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 211, ClientRequestResponse.
func (p *ClientRequestResponse) getHeader() paramHeader {
	nParams := 1
	if p.C1G2Read != nil {
		nParams++
	}
	if p.C1G2Write != nil {
		nParams++
	}
	if p.C1G2Kill != nil {
		nParams++
	}
	if p.C1G2Recommission != nil {
		nParams++
	}
	if p.C1G2Lock != nil {
		nParams++
	}
	if p.C1G2BlockErase != nil {
		nParams++
	}
	if p.C1G2BlockWrite != nil {
		nParams++
	}
	if p.C1G2BlockPermalock != nil {
		nParams++
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		nParams++
	}
	if p.ClientRequestOpSpec != nil {
		nParams++
	}
	if p.Custom != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamClientRequestResponse,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.EPCData.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.C1G2Read != nil {
		sh := p.C1G2Read.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Write != nil {
		sh := p.C1G2Write.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Kill != nil {
		sh := p.C1G2Kill.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Recommission != nil {
		sh := p.C1G2Recommission.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2Lock != nil {
		sh := p.C1G2Lock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockErase != nil {
		sh := p.C1G2BlockErase.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockWrite != nil {
		sh := p.C1G2BlockWrite.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockPermalock != nil {
		sh := p.C1G2BlockPermalock.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2GetBlockPermalockStatus != nil {
		sh := p.C1G2GetBlockPermalockStatus.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ClientRequestOpSpec != nil {
		sh := p.ClientRequestOpSpec.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.Custom != nil {
		sh := p.Custom.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ClientRequestResponse) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AccessSpecID >> 24), byte(p.AccessSpecID >> 16), byte(p.AccessSpecID >> 8), byte(p.AccessSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamClientRequestResponse: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 217, LLRPConfigurationStateValue.
func (p *LLRPConfigurationStateValue) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLLRPConfigurationStateValue,
		data:      p,
		sz:        8,
	}
}
func (p *LLRPConfigurationStateValue) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLLRPConfigurationStateValue: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 218, Identification.
func (p *Identification) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamIdentification,
		data:      p,
		sz:        7 + uint16(len(p.ReaderID)),
	}
}
func (p *Identification) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.IDType)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamIdentification: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.ReaderID) >> 8), byte(len(p.ReaderID) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of ReaderID: %w", err)
	}
	if _, err := w.Write(p.ReaderID); err != nil {
		return fmt.Errorf("failed to write ReaderID: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 219, GPOWriteData.
func (p *GPOWriteData) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPOWriteData,
		data:      p,
		sz:        7,
	}
}
func (p *GPOWriteData) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Port >> 8), byte(p.Port), b2b(p.Data) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGPOWriteData: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 220, KeepAliveSpec.
func (p *KeepAliveSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamKeepAliveSpec,
		data:      p,
		sz:        9,
	}
}
func (p *KeepAliveSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.Interval >> 24), byte(p.Interval >> 16), byte(p.Interval >> 8), byte(p.Interval)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamKeepAliveSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 221, AntennaProperties.
func (p *AntennaProperties) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaProperties,
		data:      p,
		sz:        9,
	}
}
func (p *AntennaProperties) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{b2b(p.AntennaConnected) << 7,
		byte(p.AntennaID >> 8), byte(p.AntennaID),
		byte(p.AntennaGain >> 8), byte(p.AntennaGain)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAntennaProperties: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 222, AntennaConfiguration.
func (p *AntennaConfiguration) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.RFReceiver != nil {
		nParams++
	}
	if p.RFTransmitter != nil {
		nParams++
	}
	if p.C1G2InventoryCommand != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAntennaConfiguration,
		data:      p,
		sz:        6,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.RFReceiver != nil {
		sh := p.RFReceiver.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFTransmitter != nil {
		sh := p.RFTransmitter.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2InventoryCommand != nil {
		sh := p.C1G2InventoryCommand.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AntennaConfiguration) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAntennaConfiguration: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 223, RFReceiver.
func (p *RFReceiver) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFReceiver,
		data:      p,
		sz:        6,
	}
}
func (p *RFReceiver) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFReceiver: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 224, RFTransmitter.
func (p *RFTransmitter) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFTransmitter,
		data:      p,
		sz:        10,
	}
}
func (p *RFTransmitter) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.HopTableID >> 8), byte(p.HopTableID),
		byte(p.ChannelIndex >> 8), byte(p.ChannelIndex),
		byte(p.TransmitPowerIndex >> 8), byte(p.TransmitPowerIndex)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFTransmitter: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 225, GPIPortCurrentState.
func (p *GPIPortCurrentState) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIPortCurrentState,
		data:      p,
		sz:        8,
	}
}
func (p *GPIPortCurrentState) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Port >> 8), byte(p.Port), b2b(p.Enabled) << 7, byte(p.State)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGPIPortCurrentState: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 226, EventsAndReports.
func (p *EventsAndReports) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEventsAndReports,
		data:      p,
		sz:        5,
	}
}
func (p *EventsAndReports) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{b2b(bool(*p)) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamEventsAndReports: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 237, ROReportSpec.
func (p *ROReportSpec) getHeader() paramHeader {
	nParams := 1 + len(p.Custom)
	ph := paramHeader{
		ParamType: ParamROReportSpec,
		data:      p,
		sz:        7,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.TagReportContentSelector.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ROReportSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Trigger),
		byte(p.N >> 8), byte(p.N)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROReportSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 238, TagReportContentSelector.
func (p *TagReportContentSelector) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.C1G2EPCMemorySelector != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamTagReportContentSelector,
		data:      p,
		sz:        6,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.C1G2EPCMemorySelector != nil {
		sh := p.C1G2EPCMemorySelector.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *TagReportContentSelector) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.EnableROSpecID)<<7 | b2b(p.EnableSpecIndex)<<6 | b2b(p.EnableInventoryParamSpecID)<<5 | b2b(p.EnableAntennaID)<<4 | b2b(p.EnableChannelIndex)<<3 | b2b(p.EnablePeakRSSI)<<2 | b2b(p.EnableFirstSeenTimestamp)<<1 | b2b(p.EnableLastSeenTimestamp)<<0, b2b(p.EnableTagSeenCount)<<7 | b2b(p.EnableAccessSpecID)<<6}); err != nil {
		return fmt.Errorf("failed to write fields for ParamTagReportContentSelector: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 239, AccessReportSpec.
func (p *AccessReportSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAccessReportSpec,
		data:      p,
		sz:        5,
	}
}
func (p *AccessReportSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAccessReportSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 240, TagReportData.
func (p *TagReportData) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	if p.InventoryParameterSpecID != nil {
		nParams++
	}
	if p.AntennaID != nil {
		nParams++
	}
	if p.PeakRSSI != nil {
		nParams++
	}
	if p.ChannelIndex != nil {
		nParams++
	}
	if p.FirstSeenUTC != nil {
		nParams++
	}
	if p.FirstSeenUptime != nil {
		nParams++
	}
	if p.LastSeenUTC != nil {
		nParams++
	}
	if p.LastSeenUptime != nil {
		nParams++
	}
	if p.TagSeenCount != nil {
		nParams++
	}
	if p.C1G2PC != nil {
		nParams++
	}
	if p.C1G2XPCW1 != nil {
		nParams++
	}
	if p.C1G2XPCW2 != nil {
		nParams++
	}
	if p.C1G2CRC != nil {
		nParams++
	}
	if p.AccessSpecID != nil {
		nParams++
	}
	if p.C1G2ReadOpSpecResult != nil {
		nParams++
	}
	if p.C1G2WriteOpSpecResult != nil {
		nParams++
	}
	if p.C1G2KillOpSpecResult != nil {
		nParams++
	}
	if p.C1G2LockOpSpecResult != nil {
		nParams++
	}
	if p.C1G2BlockEraseOpSpecResult != nil {
		nParams++
	}
	if p.C1G2BlockWriteOpSpecResult != nil {
		nParams++
	}
	if p.C1G2RecommissionOpSpecResult != nil {
		nParams++
	}
	if p.C1G2BlockPermalockOpSpecResult != nil {
		nParams++
	}
	if p.C1G2GetBlockPermalockStatusOpSpecResult != nil {
		nParams++
	}
	if p.ClientRequestOpSpecResult != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamTagReportData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	switch {
	case p.EPCData.EPC != nil:
		ph.subs = append(ph.subs, p.EPCData.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	case p.EPC96.EPC != nil:
		ph.subs = append(ph.subs, p.EPC96.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.InventoryParameterSpecID != nil {
		sh := p.InventoryParameterSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaID != nil {
		sh := p.AntennaID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.PeakRSSI != nil {
		sh := p.PeakRSSI.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ChannelIndex != nil {
		sh := p.ChannelIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FirstSeenUTC != nil {
		sh := p.FirstSeenUTC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FirstSeenUptime != nil {
		sh := p.FirstSeenUptime.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LastSeenUTC != nil {
		sh := p.LastSeenUTC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.LastSeenUptime != nil {
		sh := p.LastSeenUptime.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.TagSeenCount != nil {
		sh := p.TagSeenCount.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2PC != nil {
		sh := p.C1G2PC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2XPCW1 != nil {
		sh := p.C1G2XPCW1.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2XPCW2 != nil {
		sh := p.C1G2XPCW2.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2CRC != nil {
		sh := p.C1G2CRC.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AccessSpecID != nil {
		sh := p.AccessSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2ReadOpSpecResult != nil {
		sh := p.C1G2ReadOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2WriteOpSpecResult != nil {
		sh := p.C1G2WriteOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2KillOpSpecResult != nil {
		sh := p.C1G2KillOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2LockOpSpecResult != nil {
		sh := p.C1G2LockOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockEraseOpSpecResult != nil {
		sh := p.C1G2BlockEraseOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockWriteOpSpecResult != nil {
		sh := p.C1G2BlockWriteOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2RecommissionOpSpecResult != nil {
		sh := p.C1G2RecommissionOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2BlockPermalockOpSpecResult != nil {
		sh := p.C1G2BlockPermalockOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.C1G2GetBlockPermalockStatusOpSpecResult != nil {
		sh := p.C1G2GetBlockPermalockStatusOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ClientRequestOpSpecResult != nil {
		sh := p.ClientRequestOpSpecResult.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *TagReportData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 241, EPCData.
func (p *EPCData) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEPCData,
		data:      p,
		sz:        6 + uint16(((int(p.EPCNumBits)-1)>>3)+1),
	}
}
func (p *EPCData) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.EPCNumBits >> 8), byte(p.EPCNumBits & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of EPC: %w", err)
	}
	if _, err := w.Write(p.EPC); err != nil {
		return fmt.Errorf("failed to write EPC: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 242, RFSurveyReportData.
func (p *RFSurveyReportData) getHeader() paramHeader {
	nParams := len(p.FrequencyRSSILevelEntries) + len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamRFSurveyReportData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.FrequencyRSSILevelEntries {
		sh := p.FrequencyRSSILevelEntries[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *RFSurveyReportData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 243, FrequencyRSSILevelEntry.
func (p *FrequencyRSSILevelEntry) getHeader() paramHeader {
	ph := paramHeader{
		ParamType: ParamFrequencyRSSILevelEntry,
		data:      p,
		sz:        14,
	}
	switch {
	case p.UTCTimestamp != 0:
		ph.subs = append(ph.subs, p.UTCTimestamp.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	case p.Uptime != 0:
		ph.subs = append(ph.subs, p.Uptime.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	}
	return ph
}
func (p *FrequencyRSSILevelEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Frequency >> 24), byte(p.Frequency >> 16), byte(p.Frequency >> 8), byte(p.Frequency),
		byte(p.Bandwidth >> 24), byte(p.Bandwidth >> 16), byte(p.Bandwidth >> 8), byte(p.Bandwidth), byte(p.AverageRSSI), byte(p.PeakRSSI)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFrequencyRSSILevelEntry: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 244, ReaderEventNotificationSpec.
func (p *ReaderEventNotificationSpec) getHeader() paramHeader {
	nParams := len(p.EventNotificationStates)
	ph := paramHeader{
		ParamType: ParamReaderEventNotificationSpec,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.EventNotificationStates {
		sh := p.EventNotificationStates[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ReaderEventNotificationSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 245, EventNotificationState.
func (p *EventNotificationState) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamEventNotificationState,
		data:      p,
		sz:        7,
	}
}
func (p *EventNotificationState) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ReaderEventType >> 8), byte(p.ReaderEventType), b2b(p.NotificationEnabled) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamEventNotificationState: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 246, ReaderEventNotificationData.
func (p *ReaderEventNotificationData) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.HoppingEvent != nil {
		nParams++
	}
	if p.GPIEvent != nil {
		nParams++
	}
	if p.ROSpecEvent != nil {
		nParams++
	}
	if p.ReportBufferLevelWarningEvent != nil {
		nParams++
	}
	if p.ReportBufferOverflowErrorEvent != nil {
		nParams++
	}
	if p.ReaderExceptionEvent != nil {
		nParams++
	}
	if p.RFSurveyEvent != nil {
		nParams++
	}
	if p.AISpecEvent != nil {
		nParams++
	}
	if p.AntennaEvent != nil {
		nParams++
	}
	if p.ConnectionAttemptEvent != nil {
		nParams++
	}
	if p.ConnectionCloseEvent != nil {
		nParams++
	}
	if p.SpecLoopEvent != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamReaderEventNotificationData,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	switch {
	case p.UTCTimestamp != 0:
		ph.subs = append(ph.subs, p.UTCTimestamp.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	case p.Uptime != 0:
		ph.subs = append(ph.subs, p.Uptime.getHeader())
		ph.sz += ph.subs[len(ph.subs)-1].sz
	}
	if p.HoppingEvent != nil {
		sh := p.HoppingEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.GPIEvent != nil {
		sh := p.GPIEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ROSpecEvent != nil {
		sh := p.ROSpecEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReportBufferLevelWarningEvent != nil {
		sh := p.ReportBufferLevelWarningEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReportBufferOverflowErrorEvent != nil {
		sh := p.ReportBufferOverflowErrorEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ReaderExceptionEvent != nil {
		sh := p.ReaderExceptionEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFSurveyEvent != nil {
		sh := p.RFSurveyEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AISpecEvent != nil {
		sh := p.AISpecEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaEvent != nil {
		sh := p.AntennaEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ConnectionAttemptEvent != nil {
		sh := p.ConnectionAttemptEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ConnectionCloseEvent != nil {
		sh := p.ConnectionCloseEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecLoopEvent != nil {
		sh := p.SpecLoopEvent.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ReaderEventNotificationData) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 247, HoppingEvent.
func (p *HoppingEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamHoppingEvent,
		data:      p,
		sz:        6,
	}
}
func (p *HoppingEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamHoppingEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 248, GPIEvent.
func (p *GPIEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamGPIEvent,
		data:      p,
		sz:        7,
	}
}
func (p *GPIEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Port >> 8), byte(p.Port), b2b(p.Event) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamGPIEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 249, ROSpecEvent.
func (p *ROSpecEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamROSpecEvent,
		data:      p,
		sz:        13,
	}
}
func (p *ROSpecEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Event),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.PreemptingROSpecID >> 24), byte(p.PreemptingROSpecID >> 16), byte(p.PreemptingROSpecID >> 8), byte(p.PreemptingROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamROSpecEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 250, ReportBufferLevelWarningEvent.
func (p *ReportBufferLevelWarningEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReportBufferLevelWarningEvent,
		data:      p,
		sz:        5,
	}
}
func (p *ReportBufferLevelWarningEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamReportBufferLevelWarningEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 251, ReportBufferOverflowErrorEvent.
func (p *ReportBufferOverflowErrorEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamReportBufferOverflowErrorEvent,
		data:      p,
		sz:        4,
	}
}
func (p *ReportBufferOverflowErrorEvent) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 252, ReaderExceptionEvent.
func (p *ReaderExceptionEvent) getHeader() paramHeader {
	nParams := len(p.Custom)
	if p.ROSpecID != nil {
		nParams++
	}
	if p.SpecIndex != nil {
		nParams++
	}
	if p.InventoryParameterSpecID != nil {
		nParams++
	}
	if p.AntennaID != nil {
		nParams++
	}
	if p.AccessSpecID != nil {
		nParams++
	}
	if p.OpSpecID != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamReaderExceptionEvent,
		data:      p,
		sz:        6 + uint16(len(p.Message)),
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ROSpecID != nil {
		sh := p.ROSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SpecIndex != nil {
		sh := p.SpecIndex.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.InventoryParameterSpecID != nil {
		sh := p.InventoryParameterSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AntennaID != nil {
		sh := p.AntennaID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.AccessSpecID != nil {
		sh := p.AccessSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.OpSpecID != nil {
		sh := p.OpSpecID.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ReaderExceptionEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(len(p.Message) >> 8), byte(len(p.Message) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Message: %w", err)
	}
	if _, err := w.Write([]byte(p.Message)); err != nil {
		return fmt.Errorf("failed to write Message: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 253, RFSurveyEvent.
func (p *RFSurveyEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveyEvent,
		data:      p,
		sz:        9,
	}
}
func (p *RFSurveyEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Event),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFSurveyEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 254, AISpecEvent.
func (p *AISpecEvent) getHeader() paramHeader {
	nParams := 0
	if p.SingulationDetails != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamAISpecEvent,
		data:      p,
		sz:        11,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.SingulationDetails != nil {
		sh := p.SingulationDetails.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *AISpecEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Event),
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.SpecIndex >> 8), byte(p.SpecIndex)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAISpecEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 255, AntennaEvent.
func (p *AntennaEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamAntennaEvent,
		data:      p,
		sz:        7,
	}
}
func (p *AntennaEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Event),
		byte(p.AntennaID >> 8), byte(p.AntennaID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamAntennaEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 256, ConnectionAttemptEvent.
func (p *ConnectionAttemptEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamConnectionAttemptEvent,
		data:      p,
		sz:        6,
	}
}
func (p *ConnectionAttemptEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamConnectionAttemptEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 257, ConnectionCloseEvent.
func (p *ConnectionCloseEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamConnectionCloseEvent,
		data:      p,
		sz:        4,
	}
}
func (p *ConnectionCloseEvent) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 287, LLRPStatus.
func (p *LLRPStatus) getHeader() paramHeader {
	nParams := 0
	if p.FieldError != nil {
		nParams++
	}
	if p.ParameterError != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamLLRPStatus,
		data:      p,
		sz:        8 + uint16(len(p.ErrorDescription)),
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.FieldError != nil {
		sh := p.FieldError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.ParameterError != nil {
		sh := p.ParameterError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *LLRPStatus) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Status >> 8), byte(p.Status)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLLRPStatus: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.ErrorDescription) >> 8), byte(len(p.ErrorDescription) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of ErrorDescription: %w", err)
	}
	if _, err := w.Write([]byte(p.ErrorDescription)); err != nil {
		return fmt.Errorf("failed to write ErrorDescription: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 288, FieldError.
func (p *FieldError) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamFieldError,
		data:      p,
		sz:        8,
	}
}
func (p *FieldError) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.FieldIndex >> 8), byte(p.FieldIndex),
		byte(p.ErrorCode >> 8), byte(p.ErrorCode)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamFieldError: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 289, ParameterError.
func (p *ParameterError) getHeader() paramHeader {
	nParams := 0
	if p.ParameterError != nil {
		nParams++
	}
	if p.FieldError != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamParameterError,
		data:      p,
		sz:        8,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.ParameterError != nil {
		sh := p.ParameterError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.FieldError != nil {
		sh := p.FieldError.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *ParameterError) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ParameterType >> 8), byte(p.ParameterType),
		byte(p.ErrorCode >> 8), byte(p.ErrorCode)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamParameterError: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 327, C1G2LLRPCapabilities.
func (p *C1G2LLRPCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LLRPCapabilities,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2LLRPCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.SupportsBlockErase)<<7 | b2b(p.SupportsBlockWrite)<<6 | b2b(p.SupportsBlockPermalock)<<5 | b2b(p.SupportsTagRecommissioning)<<4 | b2b(p.SupportsUMIMethod2)<<3 | b2b(p.SupportsXPC)<<2,
		byte(p.MaxSelectFiltersPerQuery >> 8), byte(p.MaxSelectFiltersPerQuery)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2LLRPCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 328, UHFC1G2RFModeTable.
func (p *UHFC1G2RFModeTable) getHeader() paramHeader {
	nParams := len(p.UHFC1G2RFModeTableEntries)
	ph := paramHeader{
		ParamType: ParamUHFC1G2RFModeTable,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.UHFC1G2RFModeTableEntries {
		sh := p.UHFC1G2RFModeTableEntries[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *UHFC1G2RFModeTable) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 329, UHFC1G2RFModeTableEntry.
func (p *UHFC1G2RFModeTableEntry) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamUHFC1G2RFModeTableEntry,
		data:      p,
		sz:        32,
	}
}
func (p *UHFC1G2RFModeTableEntry) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ModeID >> 24), byte(p.ModeID >> 16), byte(p.ModeID >> 8), byte(p.ModeID), byte(p.DivideRatio)<<7 | b2b(p.IsEPCHagConformant)<<6, byte(p.Modulation), byte(p.ForwardLinkModulation), byte(p.SpectralMask),
		byte(p.BackscatterDataRate >> 24), byte(p.BackscatterDataRate >> 16), byte(p.BackscatterDataRate >> 8), byte(p.BackscatterDataRate),
		byte(p.PIERatio >> 24), byte(p.PIERatio >> 16), byte(p.PIERatio >> 8), byte(p.PIERatio),
		byte(p.MinTariTime >> 24), byte(p.MinTariTime >> 16), byte(p.MinTariTime >> 8), byte(p.MinTariTime),
		byte(p.MaxTariTime >> 24), byte(p.MaxTariTime >> 16), byte(p.MaxTariTime >> 8), byte(p.MaxTariTime),
		byte(p.StepTariTime >> 24), byte(p.StepTariTime >> 16), byte(p.StepTariTime >> 8), byte(p.StepTariTime)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamUHFC1G2RFModeTableEntry: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 330, C1G2InventoryCommand.
func (p *C1G2InventoryCommand) getHeader() paramHeader {
	nParams := len(p.Filters) + len(p.Custom)
	if p.RFControl != nil {
		nParams++
	}
	if p.SingulationControl != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2InventoryCommand,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.Filters {
		sh := p.Filters[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.RFControl != nil {
		sh := p.RFControl.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.SingulationControl != nil {
		sh := p.SingulationControl.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	for i := range p.Custom {
		sh := p.Custom[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *C1G2InventoryCommand) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.TagInventoryStateAware) << 7}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2InventoryCommand: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 331, C1G2Filter.
func (p *C1G2Filter) getHeader() paramHeader {
	nParams := 1
	if p.AwareFilterAction != nil {
		nParams++
	}
	if p.UnawareFilterAction != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2Filter,
		data:      p,
		sz:        5,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.TagInventoryMask.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.AwareFilterAction != nil {
		sh := p.AwareFilterAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	if p.UnawareFilterAction != nil {
		sh := p.UnawareFilterAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *C1G2Filter) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.TruncateAction) << 6}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Filter: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 332, C1G2TagInventoryMask.
func (p *C1G2TagInventoryMask) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryMask,
		data:      p,
		sz:        9 + uint16(((int(p.TagMaskNumBits)-1)>>3)+1),
	}
}
func (p *C1G2TagInventoryMask) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.MemoryBank) << 6,
		byte(p.MostSignificantBit >> 8), byte(p.MostSignificantBit)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2TagInventoryMask: %w", err)
	}
	if _, err := w.Write([]byte{byte(p.TagMaskNumBits >> 8), byte(p.TagMaskNumBits & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of TagMask: %w", err)
	}
	if _, err := w.Write(p.TagMask); err != nil {
		return fmt.Errorf("failed to write TagMask: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 333, C1G2TagInventoryStateAwareFilterAction.
func (p *C1G2TagInventoryStateAwareFilterAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateAwareFilterAction,
		data:      p,
		sz:        6,
	}
}
func (p *C1G2TagInventoryStateAwareFilterAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.Target), byte(p.FilterAction)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2TagInventoryStateAwareFilterAction: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 334, C1G2TagInventoryStateUnawareFilterAction.
func (p *C1G2TagInventoryStateUnawareFilterAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateUnawareFilterAction,
		data:      p,
		sz:        5,
	}
}
func (p *C1G2TagInventoryStateUnawareFilterAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2TagInventoryStateUnawareFilterAction: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 335, C1G2RFControl.
func (p *C1G2RFControl) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2RFControl,
		data:      p,
		sz:        8,
	}
}
func (p *C1G2RFControl) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.RFModeID >> 8), byte(p.RFModeID),
		byte(p.Tari >> 8), byte(p.Tari)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2RFControl: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 336, C1G2SingulationControl.
func (p *C1G2SingulationControl) getHeader() paramHeader {
	nParams := 0
	if p.InvAwareAction != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2SingulationControl,
		data:      p,
		sz:        11,
		subs:      make([]paramHeader, 0, nParams),
	}
	if p.InvAwareAction != nil {
		sh := p.InvAwareAction.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *C1G2SingulationControl) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.Session) << 6,
		byte(p.TagPopulation >> 8), byte(p.TagPopulation),
		byte(p.TagTransitTime >> 24), byte(p.TagTransitTime >> 16), byte(p.TagTransitTime >> 8), byte(p.TagTransitTime)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2SingulationControl: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 337, C1G2TagInventoryStateAwareSingulationAction.
func (p *C1G2TagInventoryStateAwareSingulationAction) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TagInventoryStateAwareSingulationAction,
		data:      p,
		sz:        5,
	}
}
func (p *C1G2TagInventoryStateAwareSingulationAction) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.SessionState)<<7 | byte(p.SLState)<<6}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2TagInventoryStateAwareSingulationAction: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 338, C1G2TagSpec.
func (p *C1G2TagSpec) getHeader() paramHeader {
	nParams := 1
	if p.TagPattern2 != nil {
		nParams++
	}
	ph := paramHeader{
		ParamType: ParamC1G2TagSpec,
		data:      p,
		sz:        4,
		subs:      make([]paramHeader, 0, nParams),
	}
	ph.subs = append(ph.subs, p.TagPattern1.getHeader())
	ph.sz += ph.subs[len(ph.subs)-1].sz
	if p.TagPattern2 != nil {
		sh := p.TagPattern2.getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *C1G2TagSpec) EncodeFields(w io.Writer) error {
	return nil
}

// EncodeFields for Parameter 339, C1G2TargetTag.
func (p *C1G2TargetTag) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2TargetTag,
		data:      p,
		sz: 11 + uint16(((int(p.TagMaskNumBits)-1)>>3)+1) +
			uint16(((int(p.TagDataNumBits)-1)>>3)+1),
	}
}
func (p *C1G2TargetTag) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.C1G2MemoryBank)<<6 | b2b(p.MatchFlag)<<5,
		byte(p.MostSignificantBit >> 8), byte(p.MostSignificantBit)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2TargetTag: %w", err)
	}
	if _, err := w.Write([]byte{byte(p.TagMaskNumBits >> 8), byte(p.TagMaskNumBits & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of TagMask: %w", err)
	}
	if _, err := w.Write(p.TagMask); err != nil {
		return fmt.Errorf("failed to write TagMask: %w", err)
	}
	if _, err := w.Write([]byte{byte(p.TagDataNumBits >> 8), byte(p.TagDataNumBits & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of TagData: %w", err)
	}
	if _, err := w.Write(p.TagData); err != nil {
		return fmt.Errorf("failed to write TagData: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 341, C1G2Read.
func (p *C1G2Read) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Read,
		data:      p,
		sz:        15,
	}
}
func (p *C1G2Read) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress),
		byte(p.WordCount >> 8), byte(p.WordCount)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Read: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 342, C1G2Write.
func (p *C1G2Write) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Write,
		data:      p,
		sz:        15 + uint16(len(p.Data)*2),
	}
}
func (p *C1G2Write) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Write: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Data: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return fmt.Errorf("failed to write Data: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 343, C1G2Kill.
func (p *C1G2Kill) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Kill,
		data:      p,
		sz:        10,
	}
}
func (p *C1G2Kill) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.KillPassword >> 24), byte(p.KillPassword >> 16), byte(p.KillPassword >> 8), byte(p.KillPassword)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Kill: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 344, C1G2Lock.
func (p *C1G2Lock) getHeader() paramHeader {
	nParams := len(p.C1G2LockPayloads)
	ph := paramHeader{
		ParamType: ParamC1G2Lock,
		data:      p,
		sz:        10,
		subs:      make([]paramHeader, 0, nParams),
	}
	for i := range p.C1G2LockPayloads {
		sh := p.C1G2LockPayloads[i].getHeader()
		ph.sz += sh.sz
		ph.subs = append(ph.subs, sh)
	}
	return ph
}
func (p *C1G2Lock) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Lock: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 345, C1G2LockPayload.
func (p *C1G2LockPayload) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LockPayload,
		data:      p,
		sz:        6,
	}
}
func (p *C1G2LockPayload) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.LockPrivilege), byte(p.LockData)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2LockPayload: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 346, C1G2BlockErase.
func (p *C1G2BlockErase) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockErase,
		data:      p,
		sz:        15,
	}
}
func (p *C1G2BlockErase) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress),
		byte(p.WordCount >> 8), byte(p.WordCount)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockErase: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 347, C1G2BlockWrite.
func (p *C1G2BlockWrite) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockWrite,
		data:      p,
		sz:        15 + uint16(len(p.Data)*2),
	}
}
func (p *C1G2BlockWrite) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.WordAddress >> 8), byte(p.WordAddress)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockWrite: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Data: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return fmt.Errorf("failed to write Data: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 348, C1G2EPCMemorySelector.
func (p *C1G2EPCMemorySelector) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2EPCMemorySelector,
		data:      p,
		sz:        5,
	}
}
func (p *C1G2EPCMemorySelector) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		b2b(p.CRCEnabled)<<7 | b2b(p.PCBitsEnabled)<<6 | b2b(p.XPCBitsEnabled)<<5}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2EPCMemorySelector: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 349, C1G2ReadOpSpecResult.
func (p *C1G2ReadOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2ReadOpSpecResult,
		data:      p,
		sz:        9 + uint16(len(p.Data)*2),
	}
}
func (p *C1G2ReadOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2ReadOpSpecResultType),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2ReadOpSpecResult: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.Data) >> 8), byte(len(p.Data) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of Data: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.Data); err != nil {
		return fmt.Errorf("failed to write Data: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 350, C1G2WriteOpSpecResult.
func (p *C1G2WriteOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2WriteOpSpecResult,
		data:      p,
		sz:        9,
	}
}
func (p *C1G2WriteOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2WriteOpSpecResultType),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.WordsWritten >> 8), byte(p.WordsWritten)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2WriteOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 351, C1G2KillOpSpecResult.
func (p *C1G2KillOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2KillOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2KillOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2KillResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2KillOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 352, C1G2LockOpSpecResult.
func (p *C1G2LockOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2LockOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2LockOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2LockResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2LockOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 353, C1G2BlockEraseOpSpecResult.
func (p *C1G2BlockEraseOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockEraseOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2BlockEraseOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockEraseResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockEraseOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 354, C1G2BlockWriteOpSpecResult.
func (p *C1G2BlockWriteOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockWriteOpSpecResult,
		data:      p,
		sz:        9,
	}
}
func (p *C1G2BlockWriteOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockWriteResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.WordsWritten >> 8), byte(p.WordsWritten)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockWriteOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 355, LoopSpec.
func (p *LoopSpec) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamLoopSpec,
		data:      p,
		sz:        8,
	}
}
func (p *LoopSpec) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(*p >> 24), byte(*p >> 16), byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamLoopSpec: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 356, SpecLoopEvent.
func (p *SpecLoopEvent) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamSpecLoopEvent,
		data:      p,
		sz:        12,
	}
}
func (p *SpecLoopEvent) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.ROSpecID >> 24), byte(p.ROSpecID >> 16), byte(p.ROSpecID >> 8), byte(p.ROSpecID),
		byte(p.LoopCount >> 24), byte(p.LoopCount >> 16), byte(p.LoopCount >> 8), byte(p.LoopCount)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamSpecLoopEvent: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 357, C1G2Recommission.
func (p *C1G2Recommission) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2Recommission,
		data:      p,
		sz:        11,
	}
}
func (p *C1G2Recommission) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.KillPassword >> 24), byte(p.KillPassword >> 16), byte(p.KillPassword >> 8), byte(p.KillPassword), b2b(p.SB3)<<2 | b2b(p.SB2)<<1 | b2b(p.LSB)<<0}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2Recommission: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 358, C1G2BlockPermalock.
func (p *C1G2BlockPermalock) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockPermalock,
		data:      p,
		sz:        15 + uint16(len(p.BlockMask)*2),
	}
}
func (p *C1G2BlockPermalock) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.BlockAddress >> 8), byte(p.BlockAddress)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockPermalock: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.BlockMask) >> 8), byte(len(p.BlockMask) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of BlockMask: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.BlockMask); err != nil {
		return fmt.Errorf("failed to write BlockMask: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 359, C1G2GetBlockPermalockStatus.
func (p *C1G2GetBlockPermalockStatus) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2GetBlockPermalockStatus,
		data:      p,
		sz:        15,
	}
}
func (p *C1G2GetBlockPermalockStatus) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.OpSpecID >> 8), byte(p.OpSpecID),
		byte(p.AccessPassword >> 24), byte(p.AccessPassword >> 16), byte(p.AccessPassword >> 8), byte(p.AccessPassword), byte(p.C1G2MemoryBank) << 6,
		byte(p.BlockAddress >> 8), byte(p.BlockAddress),
		byte(p.BlockRange >> 8), byte(p.BlockRange)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2GetBlockPermalockStatus: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 360, C1G2RecommissionOpSpecResult.
func (p *C1G2RecommissionOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2RecommissionOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2RecommissionOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2RecommissionResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2RecommissionOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 361, C1G2BlockPermalockOpSpecResult.
func (p *C1G2BlockPermalockOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2BlockPermalockOpSpecResult,
		data:      p,
		sz:        7,
	}
}
func (p *C1G2BlockPermalockOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2BlockPermalockResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2BlockPermalockOpSpecResult: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 362, C1G2GetBlockPermalockStatusOpSpecResult.
func (p *C1G2GetBlockPermalockStatusOpSpecResult) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamC1G2GetBlockPermalockStatusOpSpecResult,
		data:      p,
		sz:        9 + uint16(len(p.PermalockStatuses)*2),
	}
}
func (p *C1G2GetBlockPermalockStatusOpSpecResult) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(p.C1G2GetBlockPermalockStatusResult),
		byte(p.OpSpecID >> 8), byte(p.OpSpecID)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamC1G2GetBlockPermalockStatusOpSpecResult: %w", err)
	}
	if _, err := w.Write([]byte{byte(len(p.PermalockStatuses) >> 8), byte(len(p.PermalockStatuses) & 0xFF)}); err != nil {
		return fmt.Errorf("failed to write length of PermalockStatuses: %w", err)
	}
	if err := binary.Write(w, binary.BigEndian, p.PermalockStatuses); err != nil {
		return fmt.Errorf("failed to write PermalockStatuses: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 363, MaximumReceiveSensitivity.
func (p *MaximumReceiveSensitivity) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamMaximumReceiveSensitivity,
		data:      p,
		sz:        6,
	}
}
func (p *MaximumReceiveSensitivity) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{byte(*p >> 8), byte(*p)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamMaximumReceiveSensitivity: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 365, RFSurveyFrequencyCapabilities.
func (p *RFSurveyFrequencyCapabilities) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamRFSurveyFrequencyCapabilities,
		data:      p,
		sz:        12,
	}
}
func (p *RFSurveyFrequencyCapabilities) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.MinFrequency >> 24), byte(p.MinFrequency >> 16), byte(p.MinFrequency >> 8), byte(p.MinFrequency),
		byte(p.MaxFrequency >> 24), byte(p.MaxFrequency >> 16), byte(p.MaxFrequency >> 8), byte(p.MaxFrequency)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamRFSurveyFrequencyCapabilities: %w", err)
	}
	return nil
}

// EncodeFields for Parameter 1023, Custom.
func (p *Custom) getHeader() paramHeader {
	return paramHeader{
		ParamType: ParamCustom,
		data:      p,
		sz:        12 + uint16(len(p.Data)),
	}
}
func (p *Custom) EncodeFields(w io.Writer) error {
	if _, err := w.Write([]byte{
		byte(p.VendorID >> 24), byte(p.VendorID >> 16), byte(p.VendorID >> 8), byte(p.VendorID),
		byte(p.Subtype >> 24), byte(p.Subtype >> 16), byte(p.Subtype >> 8), byte(p.Subtype)}); err != nil {
		return fmt.Errorf("failed to write fields for ParamCustom: %w", err)
	}
	if _, err := w.Write(p.Data); err != nil {
		return fmt.Errorf("failed to write Data: %w", err)
	}
	return nil
}
